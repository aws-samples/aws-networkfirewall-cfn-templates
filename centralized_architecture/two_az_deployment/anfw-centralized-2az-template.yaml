#Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Network Firewall Demo with combined inspection and egress VPC - Two AZ Deployment"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters: 
          - AvailabilityZoneSelection1
          - AvailabilityZoneSelection2
      - Label:
          default: "EC2 Parameters"
        Parameters: 
          - LatestAmiId

Parameters:
  AvailabilityZoneSelection1:
    Description: First Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1a

  AvailabilityZoneSelection2:
    Description: Second Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1b

  LatestAmiId:
    Description: Latest EC2 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
      
Resources:
# spoke-a VPC
  SpokeVPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-${AWS::StackName}"

  SubnetAWorkload1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCA
      CidrBlock: "10.1.1.0/24"
      AvailabilityZone: 
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-workload-1-${AWS::StackName}"

  SubnetAWorkload2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCA
      CidrBlock: "10.1.2.0/24"
      AvailabilityZone: 
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-workload-2-${AWS::StackName}"

  SubnetATGW1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCA
      CidrBlock: "10.1.0.0/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-tgw-1-${AWS::StackName}"

  SubnetATGW2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCA
      CidrBlock: "10.1.0.16/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-tgw-2-${AWS::StackName}"

  SpokeAEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow instances to get to SSM Systems Manager
        VpcId: !Ref SpokeVPCA
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.1.0.0/16
          Description: "Allow HTTPS traffic from Spoke A VPC for SSM access"
  SpokeASSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeAEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        SubnetIds: 
          - !Ref SubnetAWorkload1
          - !Ref SubnetAWorkload2
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCA

  SpokeAEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeAEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
        SubnetIds: 
          - !Ref SubnetAWorkload1
          - !Ref SubnetAWorkload2
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCA

  SpokeASSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeAEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
        SubnetIds: 
          - !Ref SubnetAWorkload1
          - !Ref SubnetAWorkload2
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCA
 
  SpokeAInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "subnet-a-role-${AWS::StackName}"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  SpokeAInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SpokeAInstanceRole
        
  SpokeAWorkloadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ICMP access from 10.0.0.0/8 and inspection VPC"
      GroupName: !Sub "spoke-a-sec-group-${AWS::StackName}"
      VpcId: !Ref SpokeVPCA
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          Description: "Allow traffic from private networks"
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: icmp
          CidrIp: 100.64.0.0/16
          Description: "Allow traffic from inspection VPC"
          FromPort: "-1"
          ToPort: "-1"
  EC2SubnetA1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetAWorkload1
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SpokeAWorkloadSecurityGroup
      IamInstanceProfile: !Ref SpokeAInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-1-${AWS::StackName}"

  EC2SubnetA2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetAWorkload2
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SpokeAWorkloadSecurityGroup
      IamInstanceProfile: !Ref SpokeAInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-2-${AWS::StackName}"
      
# spoke-b VPC
  SpokeVPCB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.2.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-${AWS::StackName}"

  SubnetBWorkload1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCB
      CidrBlock: "10.2.1.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-workload-1-${AWS::StackName}"

  SubnetBWorkload2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCB
      CidrBlock: "10.2.2.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-workload-2-${AWS::StackName}"

  SubnetBTGW1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCB
      CidrBlock: "10.2.0.0/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-tgw-1-${AWS::StackName}"

  SubnetBTGW2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCB
      CidrBlock: "10.2.0.16/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-tgw-2-${AWS::StackName}"

  SpokeBEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow instances to get to SSM Systems Manager
        VpcId: !Ref SpokeVPCB
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.2.0.0/16
          Description: "Allow HTTPS traffic from Spoke B VPC for SSM access"
  SpokeBSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeBEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        SubnetIds: 
          - !Ref SubnetBWorkload1
          - !Ref SubnetBWorkload2
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCB

  SpokeBEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeBEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
        SubnetIds: 
          - !Ref SubnetBWorkload1
          - !Ref SubnetBWorkload2
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCB

  SpokeBSSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeBEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
        SubnetIds: 
          - !Ref SubnetBWorkload1
          - !Ref SubnetBWorkload2
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCB

  SpokeBInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "subnet-b-role-${AWS::StackName}"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  SpokeBInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SpokeBInstanceRole
        
  SpokeBWorkloadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ICMP access from 10.0.0.0/8 and inspection VPC"
      GroupName: !Sub "spoke-b-sec-group-${AWS::StackName}"
      VpcId: !Ref SpokeVPCB
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          Description: "Allow traffic from private networks"
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: icmp
          CidrIp: 100.64.0.0/16
          Description: "Allow traffic from inspection VPC"
          FromPort: "-1"
          ToPort: "-1"
  EC2SubnetB1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetBWorkload1
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SpokeBWorkloadSecurityGroup
      IamInstanceProfile: !Ref SpokeBInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Instance launched without public IP" > /tmp/launch.log
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-1-${AWS::StackName}"

  EC2SubnetB2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetBWorkload2
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SpokeBWorkloadSecurityGroup
      IamInstanceProfile: !Ref SpokeBInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Instance launched without public IP" > /tmp/launch.log
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-2-${AWS::StackName}"

# Combined inspection and egress VPC
  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "100.64.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "inspection-egress-${AWS::StackName}"

  SubnetCFirewall1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: InspectionVPC
      CidrBlock: "100.64.0.16/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "inspection-firewall-1-${AWS::StackName}"

  SubnetCFirewall2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: InspectionVPC
      CidrBlock: "100.64.0.32/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "inspection-firewall-2-${AWS::StackName}"

  SubnetCTGW1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: InspectionVPC
      CidrBlock: "100.64.0.0/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "inspection-tgw-1-${AWS::StackName}"

  SubnetCTGW2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: InspectionVPC
      CidrBlock: "100.64.0.48/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "inspection-tgw-2-${AWS::StackName}"

  SubnetCPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: InspectionVPC
      CidrBlock: "100.64.1.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "inspection-public-1-${AWS::StackName}"

  SubnetCPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: InspectionVPC
      CidrBlock: "100.64.2.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "inspection-public-2-${AWS::StackName}"

  InternetGatewayVPCC:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "inspection-igw-${AWS::StackName}"

  AttachGatewayVPCC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        !Ref InspectionVPC
      InternetGatewayId:
        !Ref InternetGatewayVPCC

  SubnetCNATEIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "inspection-natgw-eip-1-${AWS::StackName}"

  SubnetCNATEIP2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "inspection-natgw-eip-2-${AWS::StackName}"

  SubnetCNATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - SubnetCNATEIP1
          - AllocationId
      SubnetId:
        Ref: SubnetCPublic1
      Tags:
        - Key: Name
          Value: !Sub "inspection-natgw-1-${AWS::StackName}"

  SubnetCNATGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - SubnetCNATEIP2
          - AllocationId
      SubnetId:
        Ref: SubnetCPublic2
      Tags:
        - Key: Name
          Value: !Sub "inspection-natgw-2-${AWS::StackName}"
# Transit Gateway
  CentralTransitGateway:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      AmazonSideAsn: 65000
      Description: "TGW Network Firewall Demo - Two AZ"
      AutoAcceptSharedAttachments: "disable"
      DefaultRouteTableAssociation: "disable"
      DefaultRouteTablePropagation: "disable"
      DnsSupport: "enable"
      VpnEcmpSupport: "enable"
      Tags:
        - Key: Name
          Value: !Sub "tgw-${AWS::StackName}"

  AttachVPCA:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds: 
        - !Ref SubnetATGW1
        - !Ref SubnetATGW2
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-attach-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      VpcId: !Ref SpokeVPCA

  AttachVPCB:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds: 
        - !Ref SubnetBTGW1
        - !Ref SubnetBTGW2
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-attach-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      VpcId: !Ref SpokeVPCB

  AttachVPCC:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds: 
        - !Ref SubnetCTGW1
        - !Ref SubnetCTGW2
      Options:
        ApplianceModeSupport: enable
      Tags:
        - Key: Name
          Value: !Sub "inspection-attach-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      VpcId: !Ref InspectionVPC
 
# Firewalls

  EgressAllowListExampleRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: egress-allow-list-example-rule-group
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesString: |
            # This is a "Strict rule ordering" egress security template meant only for the egress use case.
            # Do NOT use with "Drop All" or "Drop Established"
            # Visit https://aws.github.io/aws-security-services-best-practices/guides/network-firewall/ for all the best practices
            
            # Block, but do not log any ingress traffic
            drop ip any any -> $HOME_NET any (msg:"Ingress traffic to HOME_NET Blocked"; flow:to_server; sid:98228398;)

            # Silently allow TCP 3-way handshake to be setup by $HOME_NET clients
            pass tcp $HOME_NET any -> any any (flow:not_established, to_server; msg:"pass rules do not alert/log"; sid:9918156;)
            pass tcp any any -> $HOME_NET any (flow:not_established, to_client; msg:"pass rules do not alert/log"; sid:9918199;)

            # Silently (do not log) allow low risk protocols out to anywhere
            pass ntp $HOME_NET any -> any 123 (flow:to_server; msg:"pass rules do not alert/log"; sid:9829158;)

            # Alert on risky geos
            alert ip $HOME_NET any -> any any (msg:"Egress traffic to RU"; flow:to_server; geoip:dst,RU; metadata:geo RU; sid:8733172;)
            alert ip $HOME_NET any -> any any (msg:"Egress traffic to CN"; flow:to_server; geoip:dst,CN; metadata:geo CN; sid:873381;)

            # Block high risk TLDs
            reject tls $HOME_NET any -> any any (tls.sni; content:".ru"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:20233181;)
            reject http $HOME_NET any -> any any (http.host; content:".ru"; msg:"High risk TLD blocked"; flow:to_server; sid:20235181;)
            reject tls $HOME_NET any -> any any (tls.sni; content:".xyz"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:20232181;)
            reject http $HOME_NET any -> any any (http.host; content:".xyz"; msg:"High risk TLD blocked"; flow:to_server; sid:20235281;)
            reject tls $HOME_NET any -> any any (tls.sni; content:".info"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:10233181;)
            reject http $HOME_NET any -> any any (http.host; content:".info"; msg:"High risk TLD blocked"; flow:to_server; sid:10235181;)
            reject tls $HOME_NET any -> any any (tls.sni; content:".onion"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:23233181;)
            reject http $HOME_NET any -> any any (http.host; content:".onion"; msg:"High risk TLD blocked"; flow:to_server; sid:20335181;)

            # Silently (do not log) allow AWS public service endpoints that we have not setup VPC endpoints for yet
            # VPC endpoints are highly encouraged. They reduce NFW data processing costs and allow for additional security features like VPC endpoint policies.
            pass tls $HOME_NET any -> any any (tls.sni; content:"ec2messages."; startswith; nocase; content:".amazonaws.com"; endswith; nocase; flow:to_server; sid:20231181;)
            pass tls $HOME_NET any -> any any (tls.sni; content:"ssm."; startswith; nocase; content:".amazonaws.com"; endswith; nocase; flow:to_server; sid:2023116132;)
            pass tls $HOME_NET any -> any any (tls.sni; content:"ssmmessages."; startswith; nocase; content:".amazonaws.com"; endswith; nocase; flow:to_server; sid:2021110133;)

            # Allow-list of strict FQDNs to silently allow
            pass tls $HOME_NET any -> any any (tls.sni; content:"checkip.amazonaws.com"; startswith; nocase; endswith; flow:to_server; sid:202311893;)
            pass http $HOME_NET any -> any any (http.host; content:"checkip.amazonaws.com"; startswith; endswith; flow:to_server; sid:20236893;)

            # Allow-List of strict FQDNs, but still alert on them
            alert tls $HOME_NET any -> any any (tls.sni; content:"www.example.com"; startswith; nocase; endswith; flow:to_server; msg:"TLS SNI Allowed"; sid:202315893;)
            pass tls $HOME_NET any -> any any (tls.sni; content:"www.example.com"; startswith; nocase; endswith; flow:to_server; msg:"pass rules do not alert/log"; sid:202315873;)

            # Block and log any egress traffic not already allowed above
            # reject TCP traffic for a more graceful block
            reject tls $HOME_NET any -> any any (msg:"Default Egress HTTPS Reject"; ssl_state:client_hello; ja4.hash; content:"_"; flowbits:set,blocked; flow:to_server; sid:999991;)
            alert tls $HOME_NET any -> any any (msg:"X25519Kyber768"; flowbits:isnotset,blocked; flowbits:set,X25519Kyber768; noalert; flow:to_server; sid:999993;)
            reject http $HOME_NET any -> any any (msg:"Default Egress HTTP Reject"; flowbits:set,blocked; flow:to_server; sid:999992;)
            reject tcp $HOME_NET any -> any any (msg:"Default Egress TCP Reject"; flowbits:isnotset,blocked; flowbits:isnotset,X25519Kyber768; flow:to_server; sid:999994;)
            drop udp $HOME_NET any -> any any (msg:"Default Egress UDP Drop"; flow:to_server; sid:999995;)
            drop icmp $HOME_NET any -> any any (msg:"Default Egress ICMP Drop"; flow:to_server; sid:999996;)
            drop ip $HOME_NET any -> any any (msg:"Default Egress IP Drop"; ip_proto:!TCP; ip_proto:!UDP; ip_proto:!ICMP; flow:to_server; sid:999997;)
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
      Capacity: 1000
      Description: Example best practice egress allow list rule group

  LogOnlyRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: basic-log-rules
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesString: |
            # Visit https://aws.github.io/aws-security-services-best-practices/guides/network-firewall/ for all the best practices

            # Alert on risky geos
            alert ip $HOME_NET any -> any any (msg:"Egress traffic to RU"; flow:to_server; geoip:dst,RU; metadata:geo RU; sid:100001;)
            alert ip $HOME_NET any -> any any (msg:"Egress traffic to CN"; flow:to_server; geoip:dst,CN; metadata:geo CN; sid:100002;)

            # Alert on high risk TLDs
            alert tls $HOME_NET any -> any any (tls.sni; content:".ru"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:100003;)
            alert http $HOME_NET any -> any any (http.host; content:".ru"; msg:"High risk TLD blocked"; flow:to_server; sid:100004;)
            alert tls $HOME_NET any -> any any (tls.sni; content:".xyz"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:100005;)
            alert http $HOME_NET any -> any any (http.host; content:".xyz"; msg:"High risk TLD blocked"; flow:to_server; sid:100006;)
            alert tls $HOME_NET any -> any any (tls.sni; content:".info"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:100007;)
            alert http $HOME_NET any -> any any (http.host; content:".info"; msg:"High risk TLD blocked"; flow:to_server; sid:100008;)
            alert tls $HOME_NET any -> any any (tls.sni; content:".onion"; nocase; msg:"High risk TLD blocked"; flow:to_server; sid:100009;)
            alert http $HOME_NET any -> any any (http.host; content:".onion"; msg:"High risk TLD blocked"; flow:to_server; sid:1000010;)

            # Alert on specific protocols
            alert icmp any any -> any any (msg:"Alert on ping"; sid:1000011;)
            alert http any any -> any any (msg:"Alert on http"; sid:1000012;)
            alert tls any any -> any any (msg:"Alert on tls (https)"; sid:1000013;)
            alert ssh any any -> any any (msg:"Alert on ssh"; sid:1000014;)
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
      Capacity: 100
      Description: Simple rule group to log specific protocols, used to showcase default firewall behavior without any drop/pass rules. 

  EgressFirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: !Sub "${AWS::StackName}-firewall-policy"
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'
        StatefulRuleGroupReferences:
          - ResourceArn: !Ref LogOnlyRuleGroup
            Priority: 100
        StatefulEngineOptions:
          RuleOrder: STRICT_ORDER
          StreamExceptionPolicy: REJECT
        PolicyVariables:
          RuleVariables:
            HOME_NET:
              Definition:
                - 10.0.0.0/8
                - 172.16.0.0/12
                - 192.168.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-firewall-policy"

  InspectionFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub "inspection-firewall-${AWS::StackName}"
      FirewallPolicyArn: !Ref EgressFirewallPolicy
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref SubnetCFirewall1
        - SubnetId: !Ref SubnetCFirewall2
      Tags:
        - Key: Name
          Value: !Sub "inspection-firewall-${AWS::StackName}"

  InspectionFirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/inspection-fw/flow"
      RetentionInDays: 30

  InspectionFirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_158"
            comment: "Ensure that CloudWatch Log Group is encrypted by KMS"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/inspection-fw/alert"
      RetentionInDays: 30
    
  InspectionFirewallLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref InspectionFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/inspection-fw/flow"
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/inspection-fw/alert"
# Route Tables
  SubnetAWorkloadRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCA
      Tags:
        - Key: Name
          Value: !Sub "subnet-a-workload-route-table-1-${AWS::StackName}"

  SubnetAWorkloadRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCA
      Tags:
        - Key: Name
          Value: !Sub "subnet-a-workload-route-table-2-${AWS::StackName}"

  SubnetAWorkloadRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetAWorkload1
    Properties:
      RouteTableId: !Ref SubnetAWorkloadRouteTable1
      SubnetId: !Ref SubnetAWorkload1

  SubnetAWorkloadRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetAWorkload2
    Properties:
      RouteTableId: !Ref SubnetAWorkloadRouteTable2
      SubnetId: !Ref SubnetAWorkload2

  SubnetAWorkloadDefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCA
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetAWorkloadRouteTable1

  SubnetAWorkloadDefaultRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCA
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetAWorkloadRouteTable2
 
  SubnetBWorkloadRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCB
      Tags:
        - Key: Name
          Value: !Sub "subnet-b-workload-route-table-1-${AWS::StackName}"

  SubnetBWorkloadRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCB
      Tags:
        - Key: Name
          Value: !Sub "subnet-b-workload-route-table-2-${AWS::StackName}"

  SubnetBWorkloadRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetBWorkload1
    Properties:
      RouteTableId: !Ref SubnetBWorkloadRouteTable1
      SubnetId: !Ref SubnetBWorkload1

  SubnetBWorkloadRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetBWorkload2
    Properties:
      RouteTableId: !Ref SubnetBWorkloadRouteTable2
      SubnetId: !Ref SubnetBWorkload2

  SubnetBWorkloadInternalRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCB
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetBWorkloadRouteTable1

  SubnetBWorkloadInternalRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCB
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetBWorkloadRouteTable2

  # Dedicated route tables for TGW subnets
  SubnetATGWRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCA
      Tags:
        - Key: Name
          Value: !Sub "subnet-a-tgw-route-table-1-${AWS::StackName}"

  SubnetATGWRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCA
      Tags:
        - Key: Name
          Value: !Sub "subnet-a-tgw-route-table-2-${AWS::StackName}"

  SubnetATGWRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetATGW1
    Properties:
      RouteTableId: !Ref SubnetATGWRouteTable1
      SubnetId: !Ref SubnetATGW1

  SubnetATGWRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetATGW2
    Properties:
      RouteTableId: !Ref SubnetATGWRouteTable2
      SubnetId: !Ref SubnetATGW2

  SubnetBTGWRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCB
      Tags:
        - Key: Name
          Value: !Sub "subnet-b-tgw-route-table-1-${AWS::StackName}"

  SubnetBTGWRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCB
      Tags:
        - Key: Name
          Value: !Sub "subnet-b-tgw-route-table-2-${AWS::StackName}"

  SubnetBTGWRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetBTGW1
    Properties:
      RouteTableId: !Ref SubnetBTGWRouteTable1
      SubnetId: !Ref SubnetBTGW1

  SubnetBTGWRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetBTGW2
    Properties:
      RouteTableId: !Ref SubnetBTGWRouteTable2
      SubnetId: !Ref SubnetBTGW2

  # Firewall subnet routes to NAT Gateway for internet access
  SubnetCFirewallRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub "subnet-c-firewall-route-table-1-${AWS::StackName}"

  SubnetCFirewallRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub "subnet-c-firewall-route-table-2-${AWS::StackName}"

  SubnetCFirewallRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCFirewall1
    Properties:
      RouteTableId: !Ref SubnetCFirewallRouteTable1
      SubnetId: !Ref SubnetCFirewall1

  SubnetCFirewallRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCFirewall2
    Properties:
      RouteTableId: !Ref SubnetCFirewallRouteTable2
      SubnetId: !Ref SubnetCFirewall2

  SubnetCFirewallDefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: SubnetCNATGateway1
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref SubnetCNATGateway1
      RouteTableId: !Ref SubnetCFirewallRouteTable1

  SubnetCFirewallDefaultRoute2:
    Type: AWS::EC2::Route
    DependsOn: SubnetCNATGateway2
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref SubnetCNATGateway2
      RouteTableId: !Ref SubnetCFirewallRouteTable2

  SubnetCFirewallTGWRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCC
    Properties:
      DestinationCidrBlock: "10.0.0.0/8"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetCFirewallRouteTable1

  SubnetCFirewallTGWRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCC
    Properties:
      DestinationCidrBlock: "10.0.0.0/8"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetCFirewallRouteTable2

  # TGW subnet routes through firewall for east-west, to NAT for internet
  SubnetCTGWRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub "subnet-c-tgw-route-table-1-${AWS::StackName}"

  SubnetCTGWRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub "subnet-c-tgw-route-table-2-${AWS::StackName}"
          
  SubnetCTGWRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCTGW1
    Properties:
      RouteTableId: !Ref SubnetCTGWRouteTable1
      SubnetId: !Ref SubnetCTGW1

  SubnetCTGWRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCTGW2
    Properties:
      RouteTableId: !Ref SubnetCTGWRouteTable2
      SubnetId: !Ref SubnetCTGW2

  # Route spoke traffic through firewall
  SubnetCTGWDefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: InspectionFirewall
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      VpcEndpointId: !Select [1, !Split [":", !Select [0, !GetAtt InspectionFirewall.EndpointIds]]]
      RouteTableId: !Ref SubnetCTGWRouteTable1

  SubnetCTGWDefaultRoute2:
    Type: AWS::EC2::Route
    DependsOn: InspectionFirewall
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      VpcEndpointId: !Select [1, !Split [":", !Select [1, !GetAtt InspectionFirewall.EndpointIds]]]
      RouteTableId: !Ref SubnetCTGWRouteTable2

  # Public subnet routes corporate traffic to TGW, internet to IGW
  SubnetCPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub "subnet-c-public-route-table-1-${AWS::StackName}"

  SubnetCPublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub "subnet-c-public-route-table-2-${AWS::StackName}"

  SubnetCPublicCorpRoute1:
    Type: AWS::EC2::Route
    DependsOn: InspectionFirewall
    Properties:
      DestinationCidrBlock: "10.0.0.0/8"
      VpcEndpointId: !Select [1, !Split [":", !Select [0, !GetAtt InspectionFirewall.EndpointIds]]]
      RouteTableId: !Ref SubnetCPublicRouteTable1

  SubnetCPublicCorpRoute2:
    Type: AWS::EC2::Route
    DependsOn: InspectionFirewall
    Properties:
      DestinationCidrBlock: "10.0.0.0/8"
      VpcEndpointId: !Select [1, !Split [":", !Select [1, !GetAtt InspectionFirewall.EndpointIds]]]
      RouteTableId: !Ref SubnetCPublicRouteTable2

  SubnetCPublicDefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCC
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGatewayVPCC
      RouteTableId: !Ref SubnetCPublicRouteTable1

  SubnetCPublicDefaultRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachVPCC
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGatewayVPCC
      RouteTableId: !Ref SubnetCPublicRouteTable2

  SubnetCPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCPublic1
    Properties:
      RouteTableId: !Ref SubnetCPublicRouteTable1
      SubnetId: !Ref SubnetCPublic1

  SubnetCPublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCPublic2
    Properties:
      RouteTableId: !Ref SubnetCPublicRouteTable2
      SubnetId: !Ref SubnetCPublic2
  # Transit Gateway Route Tables
  SpokeRouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "spoke-route-table-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      
  InspectionRouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "inspection-route-table-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      
  AssociateVPCARouteTable:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachVPCA
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  AssociateVPCBRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachVPCB
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  AssociateVPCCRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachVPCC
      TransitGatewayRouteTableId: !Ref InspectionRouteTable

  # Propagate spoke routes to inspection route table for return traffic
  PropagateVPCARoute:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachVPCA
      TransitGatewayRouteTableId: !Ref InspectionRouteTable

  PropagateVPCBRoute:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachVPCB
      TransitGatewayRouteTableId: !Ref InspectionRouteTable

  # Route all spoke traffic to inspection VPC
  SpokeInspectionRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayAttachmentId: !Ref AttachVPCC
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

Outputs:
  InspectionFirewallEndpointAZ1:
    Description: Network Firewall Endpoint ID for AZ1
    Value: !Select [1, !Split [":", !Select [0, !GetAtt InspectionFirewall.EndpointIds]]]
    Export:
      Name: !Sub "${AWS::StackName}-FirewallEndpoint-AZ1"

  InspectionFirewallEndpointAZ2:
    Description: Network Firewall Endpoint ID for AZ2
    Value: !Select [1, !Split [":", !Select [1, !GetAtt InspectionFirewall.EndpointIds]]]
    Export:
      Name: !Sub "${AWS::StackName}-FirewallEndpoint-AZ2"
    
  TransitGatewayId:
    Description: Transit Gateway ID
    Value: !Ref CentralTransitGateway
    
  SpokeA1InstanceId:
    Description: Spoke A AZ1 EC2 Instance ID
    Value: !Ref EC2SubnetA1

  SpokeA2InstanceId:
    Description: Spoke A AZ2 EC2 Instance ID
    Value: !Ref EC2SubnetA2

  SpokeB1InstanceId:
    Description: Spoke B AZ1 EC2 Instance ID
    Value: !Ref EC2SubnetB1

  SpokeB2InstanceId:
    Description: Spoke B AZ2 EC2 Instance ID
    Value: !Ref EC2SubnetB2
    
  SpokeASecurityGroupId:
    Description: Spoke A Security Group ID
    Value: !Ref SpokeAWorkloadSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SpokeASecGroup"
      
  SpokeBSecurityGroupId:
    Description: Spoke B Security Group ID
    Value: !Ref SpokeBWorkloadSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SpokeBSecGroup"
      
  TGWRouteTable1Id:
    Description: TGW Subnet Route Table 1 ID
    Value: !Ref SubnetCTGWRouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-TGWRouteTable1"

  TGWRouteTable2Id:
    Description: TGW Subnet Route Table 2 ID
    Value: !Ref SubnetCTGWRouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-TGWRouteTable2"
      
  PublicRouteTable1Id:
    Description: Public Subnet Route Table 1 ID
    Value: !Ref SubnetCPublicRouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable1"

  PublicRouteTable2Id:
    Description: Public Subnet Route Table 2 ID
    Value: !Ref SubnetCPublicRouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable2"
      
  InspectionRouteTableId:
    Description: Inspection TGW Route Table ID
    Value: !Ref InspectionRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-InspectionRouteTable"
      
  InspectionVPCAttachmentId:
    Description: Inspection VPC TGW Attachment ID
    Value: !Ref AttachVPCC
    Export:
      Name: !Sub "${AWS::StackName}-InspectionVPCAttachment"

  AvailabilityZone1:
    Description: First Availability Zone used
    Value: !Ref AvailabilityZoneSelection1

  AvailabilityZone2:
    Description: Second Availability Zone used
    Value: !Ref AvailabilityZoneSelection2
