#Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Network Security Workshop with spoke VPCs and centralized egress VPC"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters: 
          - AvailabilityZoneSelection
      - Label:
          default: "EC2 Parameters"
        Parameters: 
          - LatestAmiId

Parameters:
  AvailabilityZoneSelection:
    Description: Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name

  LatestAmiId:
    Description: Latest EC2 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
      
Resources:
# spoke-a VPC
  SpokeVPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-${AWS::StackName}"

  SubnetAWorkload:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCA
      CidrBlock: "10.1.1.0/24"
      AvailabilityZone: 
        Ref: AvailabilityZoneSelection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-workload-${AWS::StackName}"

  SubnetATGW:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCA
      CidrBlock: "10.1.0.0/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-tgw-${AWS::StackName}"

  SpokeAEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow instances to get to SSM Systems Manager
        VpcId: !Ref SpokeVPCA
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.1.0.0/16
          Description: "Allow HTTPS traffic from Spoke A VPC for SSM access"
  SpokeASSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeAEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        SubnetIds: 
          - !Ref SubnetAWorkload
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCA

  SpokeAEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeAEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
        SubnetIds: 
          - !Ref SubnetAWorkload
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCA

  SpokeASSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeAEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
        SubnetIds: 
          - !Ref SubnetAWorkload
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCA
 
  SubnetARole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "subnet-a-role-${AWS::StackName}"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  SubnetAInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SubnetARole
        
  SubnetASecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ICMP access from 10.0.0.0/8 and egress VPC"
      GroupName: !Sub "spoke-a-sec-group-${AWS::StackName}"
      VpcId: !Ref SpokeVPCA
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          Description: "Allow traffic from private networks"
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: icmp
          CidrIp: 100.64.0.0/16
          Description: "Allow traffic from egress VPC"
          FromPort: "-1"
          ToPort: "-1"
  EC2SubnetA:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetAWorkload
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SubnetASecGroup
      IamInstanceProfile: !Ref SubnetAInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-${AWS::StackName}"
      
# spoke-b VPC
  SpokeVPCB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.2.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-${AWS::StackName}"

  SubnetBWorkload:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCB
      CidrBlock: "10.2.1.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-workload-${AWS::StackName}"

  SubnetBTGW:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: SpokeVPCB
      CidrBlock: "10.2.0.0/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-tgw-${AWS::StackName}"

  SpokeBEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow instances to get to SSM Systems Manager
        VpcId: !Ref SpokeVPCB
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.2.0.0/16
          Description: "Allow HTTPS traffic from Spoke B VPC for SSM access"
  SpokeBSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeBEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        SubnetIds: 
          - !Ref SubnetBWorkload
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCB

  SpokeBEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeBEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
        SubnetIds: 
          - !Ref SubnetBWorkload
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCB

  SpokeBSSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
        PrivateDnsEnabled: true
        SecurityGroupIds: 
          - !Ref SpokeBEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
        SubnetIds: 
          - !Ref SubnetBWorkload
        VpcEndpointType: Interface
        VpcId: !Ref SpokeVPCB

  SubnetBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "subnet-b-role-${AWS::StackName}"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  SubnetBInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref SubnetBRole
        
  SubnetBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ICMP access from 10.0.0.0/8 and egress VPC"
      GroupName: !Sub "spoke-b-sec-group-${AWS::StackName}"
      VpcId: !Ref SpokeVPCB
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          Description: "Allow traffic from private networks"
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: icmp
          CidrIp: 100.64.0.0/16
          Description: "Allow traffic from egress VPC"
          FromPort: "-1"
          ToPort: "-1"
  EC2SubnetB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetBWorkload
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SubnetBSecGroup
      IamInstanceProfile: !Ref SubnetBInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Instance launched without public IP" > /tmp/launch.log
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-${AWS::StackName}"

# Centralized egress VPC
  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "100.64.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "egress-${AWS::StackName}"

  SubnetCTGW:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "100.64.0.0/28"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "egress-tgw-attachment-${AWS::StackName}"

  SubnetCPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "100.64.1.0/24"
      AvailabilityZone:
        Ref: AvailabilityZoneSelection
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "egress-public-${AWS::StackName}"

  EgressInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "egress-igw-${AWS::StackName}"

  AttachEgressGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        !Ref EgressVPC
      InternetGatewayId:
        !Ref EgressInternetGateway

  SubnetCNATEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  SubnetCNATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - SubnetCNATEIP
          - AllocationId
      SubnetId:
        Ref: SubnetCPublic
      Tags:
        - Key: Name
          Value: !Sub "egress-natgw-${AWS::StackName}"

# Transit Gateway
  CentralTransitGateway:
    Type: "AWS::EC2::TransitGateway"
    Properties:
      AmazonSideAsn: 65000
      Description: "TGW Network Firewall Demo"
      AutoAcceptSharedAttachments: "disable"
      DefaultRouteTableAssociation: "disable"
      DefaultRouteTablePropagation: "disable"
      DnsSupport: "enable"
      VpnEcmpSupport: "enable"
      Tags:
        - Key: Name
          Value: !Sub "tgw-${AWS::StackName}"

  AttachSpokeVPCA:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds: 
        - !Ref SubnetATGW
      Tags:
        - Key: Name
          Value: !Sub "spoke-a-attach-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      VpcId: !Ref SpokeVPCA

  AttachSpokeVPCB:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds: 
        - !Ref SubnetBTGW
      Tags:
        - Key: Name
          Value: !Sub "spoke-b-attach-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      VpcId: !Ref SpokeVPCB

  AttachEgressVPC:
    Type: "AWS::EC2::TransitGatewayAttachment"
    Properties:
      SubnetIds: 
        - !Ref SubnetCTGW
      Options:
        ApplianceModeSupport: enable
      Tags:
        - Key: Name
          Value: !Sub "egress-attach-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      VpcId: !Ref EgressVPC
 
# Route Tables
  SubnetAWorkloadRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCA
      Tags:
        - Key: Name
          Value: !Sub "subnet-a-workload-route-table-${AWS::StackName}"

  SubnetAWorkloadRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetAWorkload
    Properties:
      RouteTableId: !Ref SubnetAWorkloadRouteTable
      SubnetId: !Ref SubnetAWorkload

  SubnetAWorkloadDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachSpokeVPCA
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetAWorkloadRouteTable
 
  SubnetBWorkloadRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCB
      Tags:
        - Key: Name
          Value: !Sub "subnet-b-workload-route-table-${AWS::StackName}"

  SubnetBWorkloadRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetBWorkload
    Properties:
      RouteTableId: !Ref SubnetBWorkloadRouteTable
      SubnetId: !Ref SubnetBWorkload

  SubnetBWorkloadInternalRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachSpokeVPCB
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetBWorkloadRouteTable

  # Dedicated route tables for TGW subnets
  SubnetATGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCA
      Tags:
        - Key: Name
          Value: !Sub "subnet-a-tgw-route-table-${AWS::StackName}"

  SubnetATGWRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetATGW
    Properties:
      RouteTableId: !Ref SubnetATGWRouteTable
      SubnetId: !Ref SubnetATGW

  SubnetBTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPCB
      Tags:
        - Key: Name
          Value: !Sub "subnet-b-tgw-route-table-${AWS::StackName}"

  SubnetBTGWRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetBTGW
    Properties:
      RouteTableId: !Ref SubnetBTGWRouteTable
      SubnetId: !Ref SubnetBTGW

  # TGW attachment subnet routes through NAT for internet
  SubnetCTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub "egress-tgw-attachment-route-table-${AWS::StackName}"
          
  SubnetCTGWRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCTGW
    Properties:
      RouteTableId: !Ref SubnetCTGWRouteTable
      SubnetId: !Ref SubnetCTGW

  # Route spoke traffic through NAT Gateway
  SubnetCTGWDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: SubnetCNATGateway
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref SubnetCNATGateway
      RouteTableId: !Ref SubnetCTGWRouteTable

  # Public subnet routes corporate traffic to TGW, internet to IGW
  SubnetCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub "egress-public-route-table-${AWS::StackName}"

  SubnetCPublicCorpRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachEgressVPC
    Properties:
      DestinationCidrBlock: "10.0.0.0/8"
      TransitGatewayId: !Ref CentralTransitGateway
      RouteTableId: !Ref SubnetCPublicRouteTable

  SubnetCPublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachEgressVPC
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EgressInternetGateway
      RouteTableId: !Ref SubnetCPublicRouteTable

  SubnetCPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: SubnetCPublic
    Properties:
      RouteTableId: !Ref SubnetCPublicRouteTable
      SubnetId: !Ref SubnetCPublic

  # Transit Gateway Route Tables
  SpokeRouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "spoke-route-table-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      
  EgressRouteTable:
    Type: "AWS::EC2::TransitGatewayRouteTable"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "egress-route-table-${AWS::StackName}"
      TransitGatewayId: !Ref CentralTransitGateway
      
  AssociateVPCARouteTable:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachSpokeVPCA
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  AssociateVPCBRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachSpokeVPCB
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  AssociateEgressVPCRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachEgressVPC
      TransitGatewayRouteTableId: !Ref EgressRouteTable

  # Propagate spoke routes to spoke route table for east-west traffic
  PropagateSpokeAToSpokeRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachSpokeVPCA
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  PropagateSpokeBToSpokeRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachSpokeVPCB
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  # Propagate spoke routes to egress route table for return traffic
  PropagateVPCARoute:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachSpokeVPCA
      TransitGatewayRouteTableId: !Ref EgressRouteTable

  PropagateVPCBRoute:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref AttachSpokeVPCB
      TransitGatewayRouteTableId: !Ref EgressRouteTable

  # Route all spoke traffic to egress VPC
  SpokeEgressRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      TransitGatewayAttachmentId: !Ref AttachEgressVPC
      TransitGatewayRouteTableId: !Ref SpokeRouteTable

  # CloudWatch Log Groups for Network Firewall
  FirewallAlertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /nfw/alert-logs
      RetentionInDays: 7

  FirewallFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /nfw/flow-logs
      RetentionInDays: 7

Outputs:
  TransitGatewayId:
    Description: Transit Gateway ID
    Value: !Ref CentralTransitGateway
    
  SpokeAInstanceId:
    Description: Spoke A EC2 Instance ID
    Value: !Ref EC2SubnetA
    
  SpokeASecurityGroupId:
    Description: Spoke A Security Group ID
    Value: !Ref SubnetASecGroup
    Export:
      Name: !Sub "${AWS::StackName}-SpokeASecGroup"
      
  SpokeBSecurityGroupId:
    Description: Spoke B Security Group ID
    Value: !Ref SubnetBSecGroup
    Export:
      Name: !Sub "${AWS::StackName}-SpokeBSecGroup"
      
  TGWRouteTableId:
    Description: TGW Subnet Route Table ID
    Value: !Ref SubnetCTGWRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-TGWRouteTable"
      
  PublicRouteTableId:
    Description: Public Subnet Route Table ID
    Value: !Ref SubnetCPublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable"
      
  EgressRouteTableId:
    Description: Egress TGW Route Table ID
    Value: !Ref EgressRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-EgressRouteTable"
      
  EgressVPCAttachmentId:
    Description: Egress VPC TGW Attachment ID
    Value: !Ref AttachEgressVPC
    Export:
      Name: !Sub "${AWS::StackName}-EgressVPCAttachment"
